Presentation slides for concepts:
https://www.youtube.com/watch?v=Tm0Q5zr3FL4

Step by Step Guide:
https://www.youtube.com/watch?v=bU2NNFJ-UXA


Docker Swarm:
===================================
sudo docker build -t syedatyab/ts-api:0.0.1 .
sudo docker login (token as password)
sudo docker push syedatyab/ts-api:0.0.1 (where syedatyab is the username and ts-api is the repo name, each repo can have many versions/tags like 0.0.1)

On Master:
==========
sudo docker service create --name api-service --replicas 3 -p 80:8000 syedatyab/ts-api:0.0.1
sudo docker service ls

# Scale up and down by giving the number
sudo docker service scale api-service=6  

# Stop and remove the service
sudo docker service rm api-service  

# Update the service to a new version (Rolling Update)
sudo docker service update --image syedatyab/ts-api:0.0.2 api-service

# Rollback to the previous version
sudo docker service rollback api-service

# Remove unused containers from worker
sudo docker container rm <cont_id>  # Has to be done on the worker nodes itself

# Inspect a service
sudo docker service inspect api-service
sudo docker service inspect --pretty api-service

# Display logs from stderr also, along with a filter for a specific node 
sudo docker service logs api-service 2>&1 | grep api-service.4


CI/CD Setup through Jenkins
=====================================
1. Install Jenkins on master node
2. Make sure the version backup exists in /var/lib/jenkins/custom_jenkins/stored_version.txt
3. Setup a pipeline with the following Groovy code:

pipeline {
    agent any

    environment {
        GIT_REPO_URL = 'https://github.com/CodelineAtyab/message-backup-api.git'
        GIT_CREDENTIALS_ID = '0044d283-bd71-4184-801e-54561244d868'
        DOCKER_IMAGE_NAME = 'syedatyab/msg-backup-api'
        VERSION_FILE = "version.txt"
        STORED_VERSION_FILE_PATH = "/var/lib/jenkins/custom_jenkins/stored_version.txt"
    }

    stages {
        stage('Checkout and Pull') {
            steps {
                // Checkout the repository and pull the latest changes
                git branch: 'main', url: env.GIT_REPO_URL, credentialsId: env.GIT_CREDENTIALS_ID
            }
        }
        stage('Check Application Version') {
            steps {
                script {
                    // Read the current version from version.txt
                    def currentVersion = readFile("${VERSION_FILE}").trim()
                    echo "Current version: ${currentVersion}"

                    // Check if the stored version file exists
                    def storedVersion = ""
                    if (fileExists("${STORED_VERSION_FILE_PATH}")) {
                        // Read the previous version from the stored version file
                        storedVersion = readFile("${STORED_VERSION_FILE_PATH}").trim()
                        echo "Stored version: ${storedVersion}"
                    } else {
                        echo "No stored version found."
                    }
                    
                    // Compare the versions
                    if (storedVersion == currentVersion) {
                        echo "Current version is equal to stored version. Aborting the build."
                        error "Aborting build due to no version update."
                    } 
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    def currentVersion = readFile("${VERSION_FILE}").trim()
                    echo "Docker Image Version: ${currentVersion}"
                    
                    // Build the Docker image
                    sh(script: "docker build -t ${DOCKER_IMAGE_NAME}:${currentVersion} .")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    def currentVersion = readFile("${VERSION_FILE}").trim()
                    
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', passwordVariable: 'DOCKER_HUB_PASS', usernameVariable: 'DOCKER_HUB_USER_NAME')]) {
                        sh(script: "echo ${DOCKER_HUB_PASS} | docker login -u ${DOCKER_HUB_USER_NAME} --password-stdin")
                    }

                    // Push the Docker image
                    sh(script: "docker push ${DOCKER_IMAGE_NAME}:${currentVersion}")
                }
            }
        }
    }
    
    post {
        success {
            script {
                // Save the current version to the stored version file
                def currentVersion = readFile("${VERSION_FILE}").trim()
                writeFile file: "${STORED_VERSION_FILE_PATH}", text: currentVersion
                echo "Stored current version for future builds."
            }
        }
        cleanup {
            // Cleanup workspace
            cleanWs()
            echo "Workspace cleaned up."
        }
    }
}


4. Add docker push logic in the final stage

Monitoring and Logging:
===================================
pip install prometheus-fastapi-instrumentator

(Optional - Just Read) Follow the documentation to setup prometheus:

1) https://prometheus.io/docs/guides/dockerswarm/
	1.1) https://docs.docker.com/engine/daemon/prometheus/
	

# 1. Create another overlay network (virtual network as if all cont are on the same network) as we can not add prometheus cont to ingress (load balanced) network:
docker network create --driver overlay mon-network

# 2. Make api-service part of this new network also
docker service update --network-add mon-network api-service

# 3. Verify that all master and worker node's IPs are added as Peers in both of the networks
docker network inspect mon-network
docker network inspect ingress

# 4. Create a prometheus.yml file on ./~ directory with the following content:
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'docker-swarm'
    dns_sd_configs:
      - names:
          - 'tasks.api-service'
        type: A
        port: 8000
		
# 5. Create another service that only runs on the manager node. It would run prometheus server with the config defined in step 4:
docker service create --name prometheus --mount type=bind,source=$(pwd)/prometheus.yml,target=/etc/prometheus/prometheus.yml \
--network mon-network --publish 9090:9090 --constraint 'node.role == manager' prom/prometheus

# 6. Goto <manager-ip>:9090 Status -> Targets
Endpoints running on all nodes should be mentioned there. We can check number of requests by going into Graph and querying requests.

# 7. Create another service that only runs on the manager node. It would run Grafana to visualize data metrics collected by prometheus
docker service create \
  --name grafana \
  --publish 3000:3000 \
  --network mon-network \
  --constraint 'node.role == manager' \
  grafana/grafana


# 8. Add a Dashboard and then Visualization for certain metrics
Default username and password is admin/admin
